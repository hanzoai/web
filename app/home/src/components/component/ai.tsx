'use client'

/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/oPfil0MNmsd
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Chivo } from 'next/font/google'
import { Rubik } from 'next/font/google'

chivo({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link"
import { Button } from "@/components/ui/button"

export function AI() {
  return (
    <div className="flex pt-20 min-h-screen flex-col bg-gray-950 text-gray-50">
      <main className="flex-1 px-4 py-8 sm:px-6 md:px-8">
        <div className="mx-auto max-w-4xl space-y-8">
          <div className="grid gap-6 max-w-6xl w-full mx-auto">
            <div>
              <h1 className="text-3xl font-bold">Building an AI App with Hanzo</h1>
              <p className="text-gray-400">
                Creating an AI app using the Hanzo platform involves several steps, from setting up your Hanzo account
                to integrating various APIs and deploying your AI model. Below is a step-by-step guide to help you build
                an AI app using Hanzo.
              </p>
            </div>
            <div className="grid gap-6 lg:grid-cols-3">
              <div className="relative group rounded-lg border border-gray-700 p-4">
                <Link href="#" className="absolute inset-0 z-10" prefetch={false}>
                  <span className="sr-only">View</span>
                </Link>
                <div className="flex-1">
                  <h3 className="font-semibold tracking-tight">Step 1: Create Hanzo Account</h3>
                  <small className="text-sm leading-none text-gray-400">
                    Go to sign-up page, fill in details, create account. Verify email, log in.
                  </small>
                </div>
              </div>
              <div className="relative group rounded-lg border border-gray-700 p-4">
                <Link href="#" className="absolute inset-0 z-10" prefetch={false}>
                  <span className="sr-only">View</span>
                </Link>
                <div className="flex-1">
                  <h3 className="font-semibold tracking-tight">Step 2: Set Up Organization</h3>
                  <small className="text-sm leading-none text-gray-400">
                    Navigate to Organizations, create new, fill in details like name, domain, save.
                  </small>
                </div>
              </div>
              <div className="relative group rounded-lg border border-gray-700 p-4">
                <Link href="#" className="absolute inset-0 z-10" prefetch={false}>
                  <span className="sr-only">View</span>
                </Link>
                <div className="flex-1">
                  <h3 className="font-semibold tracking-tight">Step 3: Enable APIs</h3>
                  <small className="text-sm leading-none text-gray-400">
                    Go to APIs, enable required APIs like Analytics, Payment, Order, User, Form. Customize settings.
                  </small>
                </div>
              </div>
              <div className="relative group rounded-lg border border-gray-700 p-4">
                <Link href="#" className="absolute inset-0 z-10" prefetch={false}>
                  <span className="sr-only">View</span>
                </Link>
                <div className="flex-1">
                  <h3 className="font-semibold tracking-tight">Step 4: Set Up Integrations</h3>
                  <small className="text-sm leading-none text-gray-400">
                    Navigate to Integrations, enable and configure services like Stripe, Google Analytics, Mailchimp.
                  </small>
                </div>
              </div>
              <div className="relative group rounded-lg border border-gray-700 p-4">
                <Link href="#" className="absolute inset-0 z-10" prefetch={false}>
                  <span className="sr-only">View</span>
                </Link>
                <div className="flex-1">
                  <h3 className="font-semibold tracking-tight">Step 5: Create AI Model</h3>
                  <small className="text-sm leading-none text-gray-400">
                    Use machine learning framework, train model with data, save in deployable format.
                  </small>
                </div>
              </div>
              <div className="relative group rounded-lg border border-gray-700 p-4">
                <Link href="#" className="absolute inset-0 z-10" prefetch={false}>
                  <span className="sr-only">View</span>
                </Link>
                <div className="flex-1">
                  <h3 className="font-semibold tracking-tight">Step 6: Deploy AI Model</h3>
                  <small className="text-sm leading-none text-gray-400">
                    Deploy model on server/cloud, set up endpoint to interact with model.
                  </small>
                </div>
              </div>
              <div className="relative group rounded-lg border border-gray-700 p-4">
                <Link href="#" className="absolute inset-0 z-10" prefetch={false}>
                  <span className="sr-only">View</span>
                </Link>
                <div className="flex-1">
                  <h3 className="font-semibold tracking-tight">Step 7: Integrate with Hanzo</h3>
                  <small className="text-sm leading-none text-gray-400">
                    Use Webhook API to create endpoints to communicate with deployed model.
                  </small>
                </div>
              </div>
              <div className="relative group rounded-lg border border-gray-700 p-4">
                <Link href="#" className="absolute inset-0 z-10" prefetch={false}>
                  <span className="sr-only">View</span>
                </Link>
                <div className="flex-1">
                  <h3 className="font-semibold tracking-tight">Step 8: Build Front-End</h3>
                  <small className="text-sm leading-none text-gray-400">
                    Use front-end framework, integrate Hanzo APIs, communicate with AI model endpoint.
                  </small>
                </div>
              </div>
              <div className="relative group rounded-lg border border-gray-700 p-4">
                <Link href="#" className="absolute inset-0 z-10" prefetch={false}>
                  <span className="sr-only">View</span>
                </Link>
                <div className="flex-1">
                  <h3 className="font-semibold tracking-tight">Step 9: Test and Launch</h3>
                  <small className="text-sm leading-none text-gray-400">
                    Test thoroughly, fix bugs, deploy to live environment, monitor performance.
                  </small>
                </div>
              </div>
            </div>
          </div>
          <div className="grid gap-6 max-w-6xl w-full mx-auto">
            <div>
              <h2 className="text-2xl font-bold">Example Code Snippets</h2>
              <p className="text-gray-400">Here are some example code snippets to help you get started:</p>
            </div>
            <div className="grid gap-6 lg:grid-cols-2">
              <div className="relative group">
                <Link href="#" className="absolute inset-0 z-10" prefetch={false}>
                  <span className="sr-only">View</span>
                </Link>
                <div className="flex-1 py-4">
                  <h3 className="font-semibold tracking-tight flex items-center gap-2">
                    Fetching Data from Hanzo API
                    <Button
                      variant="ghost"
                      size="icon"
                      className="ml-auto"
                      onClick={() => {
                        navigator.clipboard.writeText(`fetch('https://api.hanzo.io/user', {
  method: 'GET',
  headers: {
    'Authorization': 'Bearer YOUR_ACCESS_TOKEN'
  }
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));`)
                      }}
                    >
                      <CopyIcon className="w-4 h-4" />
                      <span className="sr-only">Copy</span>
                    </Button>
                  </h3>
                  <pre className="text-sm leading-none text-gray-400">
                    <code>{`fetch('https://api.hanzo.io/user', {
  method: 'GET',
  headers: {
    'Authorization': 'Bearer YOUR_ACCESS_TOKEN'
  }
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));`}</code>
                  </pre>
                </div>
              </div>
              <div className="relative group">
                <Link href="#" className="absolute inset-0 z-10" prefetch={false}>
                  <span className="sr-only">View</span>
                </Link>
                <div className="flex-1 py-4">
                  <h3 className="font-semibold tracking-tight flex items-center gap-2">
                    Sending Data to AI Model
                    <Button
                      variant="ghost"
                      size="icon"
                      className="ml-auto"
                      onClick={() => {
                        navigator.clipboard.writeText(`fetch('https://your-ai-model-endpoint', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    input_data: 'your data here'
  })
})
  .then(response => response.json())
  .then(prediction => console.log('Prediction:', prediction))
  .catch(error => console.error('Error:', error));`)
                      }}
                    >
                      <CopyIcon className="w-4 h-4" />
                      <span className="sr-only">Copy</span>
                    </Button>
                  </h3>
                  <pre className="text-sm leading-none text-gray-400">
                    <code>{`fetch('https://your-ai-model-endpoint', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    input_data: 'your data here'
  })
})
  .then(response => response.json())
  .then(prediction => console.log('Prediction:', prediction))
  .catch(error => console.error('Error:', error));`}</code>
                  </pre>
                </div>
              </div>
            </div>
            <div>
              <h3 className="text-xl font-bold">Resources</h3>
              <ul className="list-disc list-inside text-gray-400">
                <li>
                  <Link href="#" className="underline hover:text-gray-200" prefetch={false}>
                    Hanzo API Documentation
                  </Link>
                </li>
                <li>
                  <Link href="#" className="underline hover:text-gray-200" prefetch={false}>
                    Hanzo Getting Started Guide
                  </Link>
                </li>
                <li>
                  <Link href="#" className="underline hover:text-gray-200" prefetch={false}>
                    Hanzo Integrations Guide
                  </Link>
                </li>
              </ul>
              <p className="text-gray-400 mt-4">
                Following these steps, you can successfully create an AI-powered application using Hanzo's powerful
                platform and APIs.
              </p>
            </div>
          </div>
        </div>
      </main>
    </div>
  )
}

function CopyIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="14" height="14" x="8" y="8" rx="2" ry="2" />
      <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" />
    </svg>
  )
}
